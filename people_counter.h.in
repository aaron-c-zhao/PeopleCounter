/**
  ******************************************************************************
  * @file           : people_counter.h.in
  * @brief          : Header file template that will read by CMake which will generate the people_counter.h afterward.
  *                   This file contains all of the parameters of the image processing pipeline.
  ******************************************************************************
**/

#ifndef __PEOPLE_COUNTER
#define __PEOPLE_COUNTER
/**
 * @brief the orientation of sensor(delete or comment out this line if the orientation is horizontal)
 */
#define __ORIENTATION_VERTICAL

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include "testing_harness.h"

/** 
 * @brief the maximum number of frames that a blob can be disappeared before it get deleted from thne tracking list
 */
#define CT_MAX_DISAPPEARED @CT_MAX_DISAPPEARED@
/** 
 * @brief the maximum distance that a blob can be from itselft in the last frame. If the distance is larger than this value, the blob
 *        will not be considered as the same one.
 */
#define CT_MAX_DISTANCE    @CT_MAX_DISTANCE@

/** 
 * @brief the length of the array that holds the rectangles. 
 */
#define RECTS_MAX_SIZE @RECTS_MAX_SIZE@
/** 
 * @brief the maximum amount of objects that could be tracked. 
 */
#define TRACKABLE_OBJECT_MAX_SIZE @TRACKABLE_OBJECT_MAX_SIZE@

/** 
 * @brief the amount of pixels in each row
 */
#define SENSOR_IMAGE_WIDTH  @SENSOR_IMAGE_WIDTH@
/** 
 * @brief the amount of pixels in each column
 */
#define SENSOR_IMAGE_HEIGHT @SENSOR_IMAGE_HEIGHT@

/** 
 * @brief Kernel size of the LoG 
 */
#define LOG_KSIZE @LOG_KSIZE@
/** 
 * @brief Sigma from the gaussian kernel 
 */
#define LOG_SIGMA @LOG_SIGMA@
/** 
 * @brief how many pixels can the queue hold 
 */
#define QUEUE_SIZE @QUEUE_SIZE@
/** 
 * @brief Sensor frame rate 
 */
#define FRAME_RATE @FRAME_RATE@
/** 
 * @brief Max area that a single blob can be 
 */
#define REC_MAX_AREA @REC_MAX_AREA@
/** 
 * @brief Min area that a single blob can be 
 */
#define REC_MIN_AREA @REC_MIN_AREA@
/** 
 * @brief erosion kernel size 
 */
#define ERO_KSIZE @ERO_KSIZE@

/** 
 * @brief the flag that indicated the blob detected should be ignored(probably it's a merged blob)
 */
#define REC_IGNORE 13
/** 
 * @brief magic number that indicates the person is going up
 */
#define DIRECTION_UP   0x00
/** 
 * @brief magic number that indicates the person is going down
 */
#define DIRECTION_DOWN 0x01

/* *******************************************************************************
 * Structure to host the frames fetched from MLX90640 sensor.
 * Note1: each pixel should be converted to 8 bit integer.
 * Note2: time stamp has a resolution of milliseconds.
 *
 *******************************************************************************/

    /**
     * @brief test 
     * 
     */
    typedef struct mat
    {
        /** pointer to array of grayscale 8bit pixels */
        uint8_t *data; 
    } ip_mat;

    /** //TODO add coments
     * @brief test
     * @details o
     */
    typedef struct config
    {
        /** test */
        uint8_t kernel_1;
        /** test */
        int16_t threshold;
        /** test */
        uint8_t max_area;
    } ip_config;

    /**
     * @brief 
     * 
     */
    typedef struct pixel
    {
        /** x coordinate of the pixel */
        uint8_t x;
        /** y coordinate of the pixel */
        uint8_t y;
    } pixel;

    /**
     * @brief 
     * 
     */
    typedef struct queue
    {
        /** */
        uint8_t count;
        /** */
        uint8_t top;
        /** */
        uint8_t bottom;
        /** */
        pixel pixels[QUEUE_SIZE];
    } queue;

    /**
     * @brief 
     * 
     */
    typedef struct rec
    {
        /** @brief test */
        uint8_t min_x;
        /** test */
        uint8_t min_y;
        /** @details test2 */
        uint8_t max_x;
        /** */
        uint8_t max_y;
        /** */
        uint8_t rid;
        /** */
        uint16_t area;
    } rec;

    /**
     * @brief 
     * 
     */
    typedef struct recs
    {
        /** */
        uint8_t count;
        /** */
        rec nodes[RECTS_MAX_SIZE];
    } recs;

    /**
     * @brief OBJECT (PERSON) STRUCT
     * 
     */
    typedef struct object
    {
        /** id of a tracked object */
        uint16_t id;                      
        /** the center position of this object */
        pixel centroid;                   
        /** number of frames this object has disappered */
        uint8_t disappeared_frames_count; 
    } object;

    /**
     * @brief HELPER STRUCT: LIST OF OBJECTS
     * 
     */
    typedef struct object_list
    {
        /** id of the next new object */
        uint16_t next_id;                         
        /** length of cyclical list */
        uint8_t length;                           
        /** fixed sized array of objects used as cyclical list */
        object object[TRACKABLE_OBJECT_MAX_SIZE]; 
    } object_list;

    /**
     * @brief HELPER STRUCT: DISTANCE OF OBJECT AND BOUNDING BOX PAIRING
     * 
     */
    typedef struct object_rect_pair
    {
        /** distance between the tracked object and the new bounding box centroid */
        uint16_t distance;    
        /** array index of the tracked object */
        uint8_t object_index; 
        /** array index of the new bounding box */
        uint8_t rect_index;   
    } object_rect_pair;

    /**
     * @brief 
     * 
     */
    typedef struct result
    {
        /** */
        uint8_t objects_length;
        /** */
        uint8_t up;
        /** */
        uint8_t down;
    } ip_result;

    /**
     * @brief RESULT STATUS ENUM
     * 
     */
    typedef enum
    {
        /** count of people is changed */
        IP_UPDATE, 
        /** count of people is unchanged, but there are still people in frame */
        IP_STILL, 
        /** no people are being tracked and no people detected in frame */
        IP_EMPTY   
    } ip_status;

#ifdef __TESTING_HARNESS
    uint64_t readTSC();
#endif

/* -------------------------------------------------------function prototype----------------------------------------------------*/
    ip_result IpProcess(void *, void *, void *);

    const object *getObjectsAddress();

#ifdef __cplusplus
}
#endif

#endif
