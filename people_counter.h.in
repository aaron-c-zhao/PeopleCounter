/**
  ******************************************************************************
  * @file           : people_counter.h
  * @brief          : Header file for storing the configurations of image processing pipeline.
  *                   This file contains all of the parameters of the image processing pipeline.
  ******************************************************************************
**/

#ifndef __PEOPLE_COUNTER
/** */
#define __PEOPLE_COUNTER
/** */
#define __ORIENTATION_VERTICAL

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include "testing_harness.h"

// CT = Centroid Tracker
/** */
#define CT_MAX_DISAPPEARED 2
/** */
#define CT_MAX_DISTANCE    8

// Array max sizes
/** */
#define RECTS_MAX_SIZE 28
/** */
#define TRACKABLE_OBJECT_MAX_SIZE 18

// Image size
/** */
#define SENSOR_IMAGE_WIDTH  32
/** */
#define SENSOR_IMAGE_HEIGHT 24

/** Kernel size of the LoG */
#define LOG_KSIZE 5
/** Sigma from the gaussian kernel */
#define LOG_SIGMA 1.5
/** how many pixels can the queue hold */
#define QUEUE_SIZE 100
/** Sensor frame rate */
#define FRAME_RATE 8
/** Max area that a single blob can be */
#define REC_MAX_AREA 50
/** Min area that a single blob can be */
#define REC_MIN_AREA 4
/** erosion kernel size */
#define ERO_KSIZE 3

/** */
#define REC_IGNORE 13
// Directions
/** */
#define DIRECTION_UP   0x00
/** */
#define DIRECTION_DOWN 0x01

/* *******************************************************************************
 * Structure to host the frames fetched from MLX90640 sensor.
 * Note1: each pixel should be converted to 8 bit integer.
 * Note2: time stamp has a resolution of milliseconds.
 *
 *******************************************************************************/

    /* IMAGE STRUCT */
    /**
     * @brief test
     * 
     */
    typedef struct mat
    {
        /** pointer to array of grayscale 8bit pixels */
        uint8_t *data; 
    } ip_mat;

    /** //TODO add coments
     * @brief test
     * @details o
     */
    typedef struct config
    {
        /** test */
        uint8_t kernel_1;
        /** test */
        int16_t threshold;
        /** test */
        uint8_t max_area;
    } ip_config;

    /**
     * @brief 
     * 
     */
    typedef struct pixel
    {
        /** x coordinate of the pixel */
        uint8_t x;
        /** y coordinate of the pixel */
        uint8_t y;
    } pixel;

    /**
     * @brief 
     * 
     */
    typedef struct queue
    {
        /** */
        uint8_t count;
        /** */
        uint8_t top;
        /** */
        uint8_t bottom;
        /** */
        pixel pixels[QUEUE_SIZE];
    } queue;

    /**
     * @brief 
     * 
     */
    typedef struct rec
    {
        /** */
        uint8_t min_x;
        /** */
        uint8_t min_y;
        /** */
        uint8_t max_x;
        /** */
        uint8_t max_y;
        /** */
        uint8_t rid;
        /** */
        uint16_t area;
    } rec;

    /**
     * @brief 
     * 
     */
    typedef struct recs
    {
        /** */
        uint8_t count;
        /** */
        rec nodes[RECTS_MAX_SIZE];
    } recs;

    /**
     * @brief OBJECT (PERSON) STRUCT
     * 
     */
    typedef struct object
    {
        /** id of a tracked object */
        uint16_t id;                      
        /** the center position of this object */
        pixel centroid;                   
        /** number of frames this object has disappered */
        uint8_t disappeared_frames_count; 
    } object;

    /**
     * @brief HELPER STRUCT: LIST OF OBJECTS
     * 
     */
    typedef struct object_list
    {
        /** id of the next new object */
        uint16_t next_id;                         
        /** length of cyclical list */
        uint8_t length;                           
        /** fixed sized array of objects used as cyclical list */
        object object[TRACKABLE_OBJECT_MAX_SIZE]; 
    } object_list;

    /**
     * @brief HELPER STRUCT: DISTANCE OF OBJECT AND BOUNDING BOX PAIRING
     * 
     */
    typedef struct object_rect_pair
    {
        /** distance between the tracked object and the new bounding box centroid */
        uint16_t distance;    
        /** array index of the tracked object */
        uint8_t object_index; 
        /** array index of the new bounding box */
        uint8_t rect_index;   
    } object_rect_pair;

    /**
     * @brief 
     * 
     */
    typedef struct result
    {
        /** */
        uint8_t objects_length;
        /** */
        uint8_t up;
        /** */
        uint8_t down;
    } ip_result;

    /**
     * @brief RESULT STATUS ENUM
     * 
     */
    typedef enum
    {
        /** count of people is changed */
        IP_UPDATE, 
        /** count of people is unchanged, but there are still people in frame */
        IP_STILL, 
        /** no people are being tracked and no people detected in frame */
        IP_EMPTY   
    } ip_status;

#ifdef __TESTING_HARNESS
    uint64_t readTSC();
#endif

/* -------------------------------------------------------function prototype----------------------------------------------------*/
    ip_result IpProcess(void *, void *, void *);

    const object *getObjectsAddress();

#ifdef __cplusplus
}
#endif

#endif
