/**
  ******************************************************************************
  * @file           : people_counter.h
  * @brief          : Header file for storing the configurations of image processing pipeline.
  *                   This file contains all of the parameters of the image processing pipeline.
  ******************************************************************************
**/

#ifndef __PEOPLE_COUNTER
#define __PEOPLE_COUNTER

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include "testing_harness.h"

// CT = Centroid Tracker
#define CT_MAX_DISAPPEARED @CT_MAX_DISAPPEARED@
#define CT_MAX_DISTANCE    @CT_MAX_DISTANCE@

// Array max sizes
#define RECTS_MAX_SIZE            @RECTS_MAX_SIZE@
// TODO consider a power 2 size for optimization sake. See: https://stackoverflow.com/questions/11040646/faster-modulus-in-c-c
#define TRACKABLE_OBJECT_MAX_SIZE @TRACKABLE_OBJECT_MAX_SIZE@

// Image size
#define SENSOR_IMAGE_WIDTH  @SENSOR_IMAGE_WIDTH@
#define SENSOR_IMAGE_HEIGHT @SENSOR_IMAGE_HEIGHT@

/* Sensor frame rate */
#define FRAME_RATE @FRAME_RATE@
// Directions
#define DIRECTION_UP   0x00
#define DIRECTION_DOWN 0x01

/* *******************************************************************************
 * Structure to host the frames fetched from MLX90640 sensor.
 * Note1: each pixel should be converted to 8 bit integer.
 * Note2: time stamp has a resolution of milliseconds.
 *
 *******************************************************************************/

/* IMAGE STRUCT */
typedef struct mat
{
  uint8_t *data; /* pointer to array of grayscale 8bit pixels */
} ip_mat;

/* PEOPLE COUNT STRUCT */
typedef struct count
{
  uint8_t direc; /* direction of count update. Can be DIRECTION_UP or DIRECTION_DOWN */
  int8_t num;    /* value of change in people count.
    -1 = no people are being tracked and no people detected in frame (IP_EMPTY)
    0 = no people crossed the middle line, but there are still people in frame (IP_STILL)
    n = n people went in the direction direc (IP_UPDATE) */
} ip_count;

/* RECTANGLE STRUCT */
typedef struct rect
{
  uint8_t x, y;          /* x, y coordinate of the top left corner */
  uint8_t width, height; /* width and height */
} ip_rect;

/* POINT STRUCT */
typedef struct point
{
  uint8_t x, y; /* x, y coordinate of a point */
} ip_point;

/* OBJECT (PERSON) STRUCT */
typedef struct object
{
  uint16_t id;                      /* id of a tracked object */
  ip_point centroid;                /* the center position of this object */
  uint8_t disappeared_frames_count; /* number of frames this object has disappered */
} ip_object;

/* HELPER STRUCT: LIST OF OBJECTS */
typedef struct object_list
{
  uint16_t next_id;                            /* id of the next new object */
  uint8_t start_index;                         /* starting index of cyclical list */
  uint8_t length;                              /* length of cyclical list */
  ip_object object[TRACKABLE_OBJECT_MAX_SIZE]; /* fixed sized array of objects used as cyclical list */
} ip_object_list;

/* HELPER STRUCT: DISTANCE OF OBJECT AND BOUNDING BOX PAIRING */
typedef struct closest_centroid
{
  uint16_t distance;    /* distance between the tracked object and the new bounding box centroid */
  uint8_t object_index; /* array index of the tracked object */
  uint8_t rect_index;   /* array index of the new bounding box */
} ip_closest_centroid;

/* IP PIPELINE CONFIGURATIONS STRUCT */
typedef struct config
{
  uint8_t kernel_1;
  uint8_t kernel_2;
  uint8_t kernel_3;
  uint8_t threshold;
  uint8_t blob_width_min;
  uint8_t blob_height_min;
  uint8_t updated_threshold;
  uint8_t max_area;
} ip_config;

/* RESULT STATUS ENUM */
typedef enum
{
  IP_UPDATE, /* count of people is changed */
  IP_STILL,  /* count of people is unchanged, but there are still people in frame */
  IP_EMPTY   /* no people are being tracked and no people detected in frame */
} ip_status;

/* Function prototypes -------------------------------------------------------- */

ip_status IpProcess(void *, void *, void *);

/* PEOPLE DETECTOR */

// Returns the number of rectangles
uint8_t detectPeople(ip_mat *, ip_mat *, ip_rect *);

uint8_t updatedDetection(ip_mat *, ip_rect *, ip_rect *);

// Returns the number of rectangles
uint8_t findCountours(ip_mat *, ip_rect *);

int16_t findValueIndex(uint16_t *, uint16_t, uint16_t);

void threshold(ip_mat *, uint8_t);

void absDiff(ip_mat *, ip_mat *);

void blur(ip_mat *, uint8_t);

void gaussianBlur(ip_mat *, uint8_t);

void stackBlur(uint8_t *, uint8_t);

/* PEOPLE TRACKER */

ip_count updateObjects(ip_rect *, uint8_t);

uint8_t isCentroidUsed(ip_closest_centroid *, uint8_t);

void bubbleSort(ip_closest_centroid *, uint8_t);

void IpInit();

#ifdef __TESTING_HARNESS
uint64_t readTSC();
#endif

#ifdef __cplusplus
}
#endif

#endif
