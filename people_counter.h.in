/**
  ******************************************************************************
  * @file           : people_counter.h
  * @brief          : Header file for storing the configurations of image processing pipeline.
  *                   This file contains all of the parameters of the image processing pipeline.
  ******************************************************************************
**/

#ifndef __PEOPLE_COUNTER
#define __PEOPLE_COUNTER

#define __ORIENTATION_VERTICAL

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include "testing_harness.h"

// CT = Centroid Tracker
#define CT_MAX_DISAPPEARED @CT_MAX_DISAPPEARED@
#define CT_MAX_DISTANCE    @CT_MAX_DISTANCE@

// Array max sizes
#define RECTS_MAX_SIZE @RECTS_MAX_SIZE@
#define TRACKABLE_OBJECT_MAX_SIZE @TRACKABLE_OBJECT_MAX_SIZE@

// Image size
#define SENSOR_IMAGE_WIDTH  @SENSOR_IMAGE_WIDTH@
#define SENSOR_IMAGE_HEIGHT @SENSOR_IMAGE_HEIGHT@

/* Kernel size of the LoG */
#define LOG_KSIZE @LOG_KSIZE@
/* Sigma from the gaussian kernel */
#define LOG_SIGMA @LOG_SIGMA@
/* how many pixels can the queue hold */
#define QUEUE_SIZE @QUEUE_SIZE@
/* Sensor frame rate */
#define FRAME_RATE @FRAME_RATE@
/* Max area that a single blob can be */
#define REC_MAX_AREA @REC_MAX_AREA@
/* Min area that a single blob can be */
#define REC_MIN_AREA @REC_MIN_AREA@
/* erosion kernel size */
#define ERO_KSIZE @ERO_KSIZE@

#define REC_IGNORE 13
// Directions
#define DIRECTION_UP   0x00
#define DIRECTION_DOWN 0x01

/* *******************************************************************************
 * Structure to host the frames fetched from MLX90640 sensor.
 * Note1: each pixel should be converted to 8 bit integer.
 * Note2: time stamp has a resolution of milliseconds.
 *
 *******************************************************************************/

    /* IMAGE STRUCT */
    typedef struct mat
    {
        uint8_t *data; /* pointer to array of grayscale 8bit pixels */
    } ip_mat;

    typedef struct config
    {
        uint8_t kernel_1;
        int16_t threshold;
        uint8_t max_area;
    } ip_config;

    typedef struct pixel
    {
        /* coordinates of the pixel */
        uint8_t x;
        uint8_t y;
    } pixel;

    typedef struct queue
    {
        uint8_t count;
        uint8_t top;
        uint8_t bottom;
        pixel pixels[QUEUE_SIZE];
    } queue;

    typedef struct rec
    {
        uint8_t min_x;
        uint8_t min_y;
        uint8_t max_x;
        uint8_t max_y;
        uint8_t rid;
        uint16_t area;
    } rec;

    typedef struct recs
    {
        uint8_t count;
        rec nodes[RECTS_MAX_SIZE];
    } recs;

    /* OBJECT (PERSON) STRUCT */
    typedef struct object
    {
        uint16_t id;                      /* id of a tracked object */
        pixel centroid;                   /* the center position of this object */
        uint8_t disappeared_frames_count; /* number of frames this object has disappered */
    } object;

    /* HELPER STRUCT: LIST OF OBJECTS */
    typedef struct object_list
    {
        uint16_t next_id;                         /* id of the next new object */
        uint8_t length;                           /* length of cyclical list */
        object object[TRACKABLE_OBJECT_MAX_SIZE]; /* fixed sized array of objects used as cyclical list */
    } object_list;

    /* HELPER STRUCT: DISTANCE OF OBJECT AND BOUNDING BOX PAIRING */
    typedef struct object_rect_pair
    {
        uint16_t distance;    /* distance between the tracked object and the new bounding box centroid */
        uint8_t object_index; /* array index of the tracked object */
        uint8_t rect_index;   /* array index of the new bounding box */
    } object_rect_pair;

    typedef struct result
    {
        uint8_t objects_length;
        uint8_t up;
        uint8_t down;
    } ip_result;

    /* RESULT STATUS ENUM */
    typedef enum
    {
        IP_UPDATE, /* count of people is changed */
        IP_STILL,  /* count of people is unchanged, but there are still people in frame */
        IP_EMPTY   /* no people are being tracked and no people detected in frame */
    } ip_status;

#ifdef __TESTING_HARNESS
    uint64_t readTSC();
#endif

/* -------------------------------------------------------function prototype----------------------------------------------------*/
    ip_result IpProcess(void *, void *, void *, void *);

    const object *getObjectsAddress();

#ifdef __cplusplus
}
#endif

#endif
